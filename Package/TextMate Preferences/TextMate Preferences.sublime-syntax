%YAML 1.2
---
name: TextMate Preferences (PList / XML)
file_extensions:
  - tmPreferences
scope: text.xml.plist.textmate.preferences

contexts:

  main:
    - include: scope:text.xml.plist#xml-declarations
    - match: '(<)(plist)\s*(?:(version)\s*(=)\s*((")1.0(")))\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin
        2: entity.name.tag.localname.xml
        3: entity.other.attribute-name.localname.xml
        4: punctuation.separator.key-value.xml
        5: string.quoted.double.xml
        6: punctuation.definition.string.begin.xml
        7: punctuation.definition.string.end.xml
        8: punctuation.definition.tag.end
      push:
        - meta_content_scope: meta.inside-plist.plist
        - include: comments
        - match: '(</)(plist)\s*(>)'
          scope: meta.tag.xml
          captures:
            1: punctuation.definition.tag.begin.xml
            2: entity.name.tag.localname.xml
            3: punctuation.definition.tag.end.xml
          set: scope:text.xml.plist#whitespace-or-tag
        - match: '(<)(dict)\s*(>)'
          scope: meta.tag.xml
          captures:
            1: punctuation.definition.tag.begin.xml
            2: entity.name.tag.localname.xml
            3: punctuation.definition.tag.end.xml
          push: inside-outer-dict
        # we only expect a dict
        - match: '\S+'
          scope: invalid.illegal.expected-dict.tmPreferences
    - include: scope:text.xml.plist#whitespace-or-tag

  comments:
    - include: scope:text.xml.plist#comments

  any-known-element:
    - include: scope:text.xml.plist#number
    - include: scope:text.xml.plist#boolean
    - include: scope:text.xml.plist#string
    - include: scope:text.xml.plist#empty-array
    # NOTE: we deliberately don't include "date", or "data" here as ST doesn't support them
    - match: '(<)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: inside-any-dict
    - match: '(<)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: end-of-array
    - include: scope:text.xml.plist#whitespace-or-tag

  dict-end:
    - include: comments
    - match: '(</)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true

  key-end:
    - include: comments
    - match: '(</)(key)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true

  inside-outer-dict:
    - meta_content_scope: meta.inside-dict.plist
    - include: dict-end

    - match: '(<)(key)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      push:
        - meta_scope: meta.main-key-wrapper.tmPreferences
        - meta_content_scope: meta.inside-dict-key.plist
        - include: key-end
        - match: 'scope(?=\s*<)'
          scope: keyword.other.scope.tmPreferences
          set: [expect-scope-string, key-end]
        - match: 'name(?=\s*<)'
          scope: keyword.other.name.tmPreferences
          set: [expect-string, key-end]
        - match: 'settings(?=\s*<)'
          scope: keyword.other.settings.tmPreferences
          set: [settings, key-end]
        - match: 'uuid(?=\s*<)'
          scope: keyword.other.uuid.tmPreferences
          set: [expect-string, key-end] # TODO validate uuid

  settings:
    - match: '(<)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: inside-settings-dict
    - include: scope:text.xml.plist#whitespace-or-tag

  inside-settings-dict:
    - meta_content_scope: meta.inside-dict.settings.tmPreferences
    - include: dict-end

    - match: '(<)(key)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      push:
        - meta_scope: meta.settings-key-wrapper.tmPreferences
        - meta_content_scope: meta.inside-dict-key.plist
        - include: inside-dict-key
        - match: 'shellVariables(?=\s*<)'
          scope: keyword.other.shellVariables.tmPreferences
          set: [shell-variables, key-end]
        - match: '(?:decreaseIndentPattern|batchDecreaseIndentPattern|increaseIndentPattern|batchIncreaseIndentPattern|disableIndentNextLinePattern|bracketIndentNextLinePattern|unIndentedLinePattern|cancelCompletion)(?=\s*<)'
          scope: entity.name.constant.setting.regex.tmPreferences
          set: [expect-regex-string, key-end]
        - match: '(?:symbolTransformation|symbolIndexTransformation)(?=\s*<)'
          scope: entity.name.constant.setting.regex-transform.tmPreferences
          set: [expect-transformation-string, key-end]
        - match: '(?:showInSymbolList|showInIndexedSymbolList|showInIndexedReferenceList)(?=\s*<)'
          scope: entity.name.constant.setting.tmPreferences
          set: [expect-integer, key-end] # yes, integer - for some reason, booleans don't work here
        - match: '(?:indentParens|indentSquareBrackets|preserveIndent)(?=\s*<)'
          scope: entity.name.constant.setting.tmPreferences
          set: [expect-boolean, key-end]
        - match: 'icon(?=\s*<)'
          scope: entity.name.setting.tmPreferences
          set: [expect-string, key-end]

    - include: inside-any-dict

  inside-any-dict:
    - meta_content_scope: meta.inside-dict.plist
    - include: dict-end

    - match: '(<)(key)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      push: [any-known-element, inside-dict-key]
    - include: scope:text.xml.plist#whitespace-or-tag

  inside-dict-key:
    - meta_content_scope: meta.inside-dict-key.plist meta.dict-key-unknown.tmPreferences
    - include: comments
    - match: '(<)(/)(key)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: meta.close-unknown-dict-key-tag.tmPreferences punctuation.definition.tag.begin.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
      set: any-known-element
    - match: '<'
      scope: punctuation.definition.tag.begin.xml
      push: scope:text.xml.plist#unknown-tag

  expect-scope-string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.string.plist
        - match: (?=<!--)
          push:
            - match: (?!<!--)
              pop: true
            - include: scope:text.xml
        - match: '(?=\S)'
          set:
            - meta_content_scope: meta.inside-value.string.plist meta.toc-list.scope.tmPreferences
            - match: '<!\[CDATA\['
              scope: string.unquoted.cdata.xml punctuation.definition.string.begin.xml
              push:
                - match: ']]>'
                  scope: string.unquoted.cdata.xml punctuation.definition.string.end.xml
                  set: st-end-of-string-handling
                - include: scope:source.scope-selector
            - match: '(</)(string)\s*(>)'
              scope: meta.tag.xml
              captures:
                1: punctuation.definition.tag.begin.xml
                2: entity.name.tag.localname.xml
                3: punctuation.definition.tag.end.xml
              pop: true
            - match: '(?=\S)'
              push:
                - include: scope:source.scope-selector
              with_prototype:
                - match: '\s*((&)amp(;))\s*'
                  captures:
                    1: constant.character.entity.xml keyword.operator.with.scope-selector
                    2: punctuation.definition.constant.xml
                    3: punctuation.definition.constant.xml
                - include: until-end-of-string
                - match: '\s*(&)\s*'
                  captures:
                    1: invalid.illegal.bad-ampersand.xml
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-regex-string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.string.plist
        - match: (?=<!--)
          push:
            - match: (?!<!--)
              pop: true
            - include: scope:text.xml
        - match: '(?=\S)'
          set:
            - meta_content_scope: meta.inside-value.string.plist
            - match: '(</)(string)\s*(>)'
              scope: meta.tag.xml
              captures:
                1: punctuation.definition.tag.begin.xml
                2: entity.name.tag.localname.xml
                3: punctuation.definition.tag.end.xml
              pop: true
            - match: '(?=<!\[CDATA\[)'
              push:
                - match: ']]>'
                  scope: string.unquoted.cdata.xml punctuation.definition.string.end.xml
                  set: st-end-of-string-handling
                - match: '<!\[CDATA\['
                  scope: string.unquoted.cdata.xml punctuation.definition.string.begin.xml
                  push: regex-pattern
                  with_prototype:
                    - match: '(?=]]>)'
                      pop: true
            - match: '(?=\S)'
              push: regex-pattern
              with_prototype:
                - include: until-end-of-string
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-transformation-string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.string.plist
        - match: (?=<!--)
          push:
            - match: (?!<!--)
              pop: true
            - include: scope:text.xml
        - match: '(?=\S)'
          set:
            - meta_content_scope: meta.inside-value.string.plist
            - match: '(</)(string)\s*(>)'
              scope: meta.tag.xml
              captures:
                1: punctuation.definition.tag.begin.xml
                2: entity.name.tag.localname.xml
                3: punctuation.definition.tag.end.xml
              pop: true
            - match: '(?=<!\[CDATA\[)'
              push:
                - match: ']]>'
                  scope: string.unquoted.cdata.xml punctuation.definition.string.end.xml
                  set: st-end-of-string-handling
                - match: '<!\[CDATA\['
                  scope: string.unquoted.cdata.xml punctuation.definition.string.begin.xml
                  push: transformation
                  with_prototype:
                    - match: '(?=]]>)'
                      pop: true
            - match: '(?=\S)'
              push: transformation
              with_prototype:
                - include: until-end-of-string
    - include: scope:text.xml.plist#whitespace-or-tag

  transformation:
    - meta_content_scope: meta.regex.transformation.tmPreferences
    - match: 's?/'
      scope: punctuation.definition.substitute-what.tmPreferences
      push:
        - meta_content_scope: source.regexp.oniguruma
        - match: (?=/)
          set:
            - match: '/'
              scope: punctuation.definition.substitute-with.tmPreferences
              set:
                - match: '(/)([gimsx-]*)(;|$)'
                  captures:
                    1: punctuation.definition.substitute-flags.tmPreferences
                    2: storage.modifier.mode.regexp.transformation.tmPreferences
                    3: punctuation.definition.substitution.end.tmPreferences
                  pop: true
                - include: scope:source.regexp-replacement
        - include: Oniguruma RegExp.sublime-syntax#base-literal
    - include: Oniguruma RegExp.sublime-syntax#group-comment
    - include: Oniguruma RegExp.sublime-syntax#extended-patterns

  regex-pattern:
    - meta_content_scope: meta.regex.tmPreferences source.regexp.oniguruma
    - include: scope:source.regexp.oniguruma

  shell-variables:
    - include: comments
    - match: '(<)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: end-of-shell-variables-array
    - include: scope:text.xml.plist#whitespace-or-tag

  end-of-shell-variables-array:
    - meta_content_scope: meta.inside-array.plist
    - match: '(</)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
    - match: ''
      push:
        - match: '(?=</array\s*>)'
          pop: true
        - include: expect-shell-variable-dict

  expect-shell-variable-dict:
    - include: comments
    - match: '(<)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: inside-shell-variables-dict
    - include: scope:text.xml.plist#whitespace-or-tag

  inside-shell-variables-dict:
    - meta_content_scope: meta.inside-dict.shellVariables.tmPreferences
    - include: dict-end

    - match: '((<)(key)\s*(>))(\s*name\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push:
        - match: '((<)(string)\s*(>))(\s*((TM_COMMENT_(?:START|END|DISABLE_INDENT)(?:_[2-9])?)|(?:[^<]*))\s*)((</)(string)\s*(>))'
          scope: meta.shellVariable-name.wrapper.tmPreferences
          captures:
            1: meta.tag.xml
            2: punctuation.definition.tag.begin.xml
            3: entity.name.tag.localname.xml
            4: punctuation.definition.tag.end.xml
            5: meta.inside-value.string.plist
            6: entity.name.constant.shellVariable.tmPreferences
            7: support.type.shellVariable.tmPreferences
            8: meta.tag.xml
            9: punctuation.definition.tag.begin.xml
            10: entity.name.tag.localname.xml
            11: punctuation.definition.tag.end.xml
          pop: true
        - include: scope:text.xml.plist#whitespace-or-tag
    - match: '((<)(key)\s*(>))(\s*value\s*)((</)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist
        6: meta.tag.xml
        7: punctuation.definition.tag.begin.xml
        8: entity.name.tag.localname.xml
        9: punctuation.definition.tag.end.xml
      push: expect-string
    - match: '((<)(key)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
      push: [expect-string, shell-variables-key-expect-name-or-value]
    - include: scope:text.xml.plist#whitespace-or-tag

  shell-variables-key-expect-name-or-value:
    - meta_content_scope: invalid.deprecated.expected-name-or-value.tmPreferences
    - include: key-end

  expect-boolean:
    - include: scope:text.xml.plist#boolean
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-integer:
    - include: scope:text.xml.plist#number
    - match: '((<)(string)\s*(>))(\s*([01])\s*)((</)(string)\s*(>))'
      captures:
        1: meta.tag.xml
        2: punctuation.definition.tag.begin.xml
        3: entity.name.tag.localname.xml
        4: punctuation.definition.tag.end.xml
        5: meta.inside-dict-key.plist
        6: constant.numeric.tmPreferences
        7: meta.tag.xml
        8: punctuation.definition.tag.begin.xml
        9: entity.name.tag.localname.xml
        10: punctuation.definition.tag.end.xml
      pop: true
    - include: scope:text.xml.plist#whitespace-or-tag

  expect-string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.string.plist
        - match: (?=<!--)
          push:
            - match: (?!<!--)
              pop: true
            - include: scope:text.xml
        - match: '(?=\S)'
          set:
            - meta_content_scope: meta.inside-value.string.plist
            - include: handle-comments-until-end-of-string
            - match: '(</)(string)\s*(>)'
              scope: meta.tag.xml
              captures:
                1: punctuation.definition.tag.begin.xml
                2: entity.name.tag.localname.xml
                3: punctuation.definition.tag.end.xml
              pop: true
            - match: '<(?!!)'
              scope: punctuation.definition.tag.begin.xml
              push: scope:text.xml.plist#unknown-tag
            - include: scope:text.xml
    - include: scope:text.xml.plist#whitespace-or-tag

  handle-comments-until-end-of-string:
    - match: '(?=<!--)'
      push: st-end-of-string-handling

  st-end-of-string-handling:
    - match: '(?=</string\s*>)'
      pop: true
    - match: '(?=<!\[CDATA\[)'
      push:
        - meta_scope: invalid.deprecated.ignored-after-comment-or-cdata.tmPreferences
        - match: '(?!<!\[CDATA\[)'
          pop: true
        - include: scope:text.xml
    - match: '<(?!!)'
      scope: punctuation.definition.tag.begin.xml
      push: scope:text.xml.plist#unknown-tag
    - include: scope:text.xml
    - match: '[^<\s]+|\s+(?![\s<])'
      scope: invalid.deprecated.ignored-after-comment-or-cdata.tmPreferences

  until-end-of-string:
    - include: handle-comments-until-end-of-string
    - match: '(?=</string\s*>|<!\[CDATA\[)'
      pop: true
    - include: scope:text.xml#entity
    - include: scope:text.xml#should-be-entity
    - match: '(\\)([<>])'
      captures:
        1: constant.character.escape.regexp
        2: constant.character.escape.regexp invalid.illegal.missing-entity.xml
    - match: '\(\?([<>])'
      captures:
        1: invalid.illegal.missing-entity.xml

  end-of-array:
    - meta_content_scope: meta.inside-array.plist
    - match: '(</)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
    - match: ''
      push:
        - match: '(?=</array\s*>)'
          pop: true
        - include: any-known-element
