# SYNTAX TEST "Packages/PackageDev/Package/Sublime Text Syntax Definition/Sublime Text Syntax Definition.sublime-syntax"
%YAML 1.2
#^^^^ keyword.other.directive.yaml.yaml
---
name: foo
#^^^ string.unquoted.plain.out.yaml entity.name.tag.yaml
scope: source.foo
#^^^^ storage.type.scope-name.sublime-syntax
file_extensions: [a, b]
#^^^^^^^^^^^^^^ string.unquoted.plain.out.yaml entity.name.tag.yaml
#                ^^^^^^ meta.flow-sequence.yaml
#                 ^ string
first_line_match: azx
#^^^^^^^^^^^^^^^ keyword.other.first_line_match.sublime-syntax
#                 ^^^ meta.expect-regexp source.regexp

hidden: false
#^^^^^ storage.modifier.hidden.sublime-syntax
#       ^^^^^ meta.expect-bool constant.language.boolean.yaml

variables:
  x1: (?<element> \g<stag> \g<content>* \g<etag> ){0}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.variables
# ^^ entity.name.constant.sublime-syntax
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expect-regexp source.regexp
  x2: '(?<stag> < \g<name> \s* > ){0}'
# ^^ entity.name.constant.sublime-syntax
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expect-regexp
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.regexp
#     ^ punctuation.definition.string.begin.yaml
#                                    ^ punctuation.definition.string.end.yaml
  x3: (?<name> [a-zA-Z_:]+ ){0}
  x4: (?<content> [^<&]+ (\g<element> | [^<&]+)* ){0}
  x5: "(?'etag' </ \\k<name+1> > ){0}"
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expect-regexp
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.regexp
#     ^ punctuation.definition.string.begin.yaml
#                                    ^ punctuation.definition.string.end.yaml
  x6: \g<element>

  x7: [a-w&&[^c-g]z] [abh-w d-]
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ invalid.illegal.expected-string.sublime-syntax
  x7_1:not a proper key-value
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^ - string - source.regexp - entity

  x8: # line break with comments
#     ^ comment
    (?:regexp)
#      ^^^^^^^ meta.expect-regexp source.regexp


  x9: '{{im_a_variable}}'
#      ^^^^^^^^^^^^^^^^^ meta.variable.sublime-syntax keyword.other.variable.sublime-syntax
#        ^^^^^^^^^^^^^ variable.other.sublime-syntax

  x10: '''{{identifier}}(?!\'')\b'
#       ^^ constant.character.escape.yaml
#                          ^^^ constant.character.escape.regexp.yaml
#                             ^ - invalid

  x11: '(?=<<<\s*''?({{identifier}})''?\s*$)'
#                ^^ constant.character.escape.yaml
#                  ^ keyword.operator.quantifier.regexp
#                                   ^^ constant.character.escape.yaml
#                                     ^ keyword.operator.quantifier.regexp

  x12: '-?{{nmstart}}{{nmchar}}*??'
#                              ^^ keyword.operator.quantifier
#                                ^ invalid.illegal.unexpected-quantifier

# TODO These two tests are failing currently (need to be reversed).
# They might be addressed later.
  x13: '(?=>|[^ \t\n\$=<_+''*(),&:\[\][:alnum:]])'
#                           ^ keyword.operator.quantifier.regexp
  x14: '[x-'']+'
#            ^ - keyword.control.set.regexp


# BLOCKS #

  b1: | # comment
# ^^ entity.name.constant.sublime-syntax
#       ^^^^^^^^^ comment
  b2: >-
    block regexp
#   ^^^^^^^^^^^^ source.regexp
  b3: >-
    (?x:
       regexp with inline-extended group)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.regexp
#                                       ^ keyword.control.group.regexp
#
# <- - source.regexp
  b4: |
    (?x)
    . #comment
#   ^ keyword.other.any.regexp
#     ^ comment
#
# <- - source.regexp
  b5: |
    ^(?x)
#        ^ source.regexp meta.ignored-whitespace

  b6: |-
      (?x)\b(
          {{font_relative_lengths}}
        | {{viewport_percentage_lengths}}
        | {{absolute_lengths}}
        | {{angle_units}}
        | {{duration_units}}
        | {{frequency_units}}
        | {{resolution_units}} )\b
#         ^^^^^^^^^^^^^^^^^^^^ meta.variable.sublime-syntax keyword.other.variable.sublime-syntax
#           ^^^^^^^^^^^^^^^^ variable.other.sublime-syntax

contexts:
# <- meta.block.contexts keyword.control.flow.contexts.sublime-syntax - meta.block.variables

  main:
# ^^^^ entity.name.function.context.sublime-syntax
    - include: scope:source.json
#     ^^^^^^^ string.unquoted.plain.out.yaml keyword.operator.include.sublime-syntax
    - match:
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list

  context_name:
# ^^^^^^^^^^^^ entity.name.function.context.sublime-syntax
    - captures:
#     ^^^^^^^^ string.unquoted.plain.out.yaml storage.type.captures.sublime-syntax
        1: name
  another_context_name:
# ^ entity.name.function.context.sublime-syntax
    - captures:
  another_context_name:
# ^ entity.name.function.context.sublime-syntax

    # Context mangling (also includes)
    - include: "Packages/JSON/JSON.sublime-syntax"
    - include: Packages/JSON/JSON.sublime-syntax#comment
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.include.sublime-syntax string
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ support.module.file-path.sublime-syntax
#                                               ^ punctuation.separator.context-name.sublime-syntax - comment
#                                                ^^^^^^^ variable.other.sublime-syntax
    - include: JSON.sublime-syntax#comments
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#              ^^^^^^^^^^^^^^^^^^^ support.module.file-path.sublime-syntax
#                                 ^ punctuation.separator.context-name.sublime-syntax
#                                  ^^^^^^^ variable.other.sublime-syntax

    - include: Packages/JSON/ #JSON.sublime-syntax#comment
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#                             ^^ comment
    - include: scope:source.regexp.oniguruma#base-group-extended
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#              ^^^^^^ support.type.include.sublime-syntax
#                   ^ punctuation.definition.scope-include.sublime-syntax
#                                           ^ punctuation.separator.context-name.sublime-syntax - comment
#                                            ^^^^^^^^^^^^^^^^^^^ variable.other.sublime-syntax

    - push: [main, Packages/JSON/JSON.sublime-syntax#comment]
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#     ^^^^ string.unquoted.plain.out.yaml keyword.control.flow.push.sublime-syntax
#           ^ punctuation.definition.array.begin.sublime-syntax
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.context-list meta.flow-sequence.yaml
#            ^^^^ meta.include.sublime-syntax string variable
#                ^ punctuation.separator.array-element.sublime-syntax
#                 ^ - punctuation - string - support.module.file-path
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.include.sublime-syntax string
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ support.module.file-path.sublime-syntax
#                                                   ^ punctuation.separator.context-name.sublime-syntax
#                                                    ^^^^^^^ variable.other.sublime-syntax
#                                                           ^ punctuation.definition.array.end.sublime-syntax
      set: Packages/JSON/JSON.sublime-syntax#comment
#    ^ - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#     ^^^ string.unquoted.plain.out.yaml keyword.control.flow.push.sublime-syntax
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.include.sublime-syntax string
    - set: Packages/JSON/JSON.sublime-syntax XX#comment
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string - meta.include

    - comment: this is a comment
#     ^^^^^^^ string.unquoted.plain.out.yaml entity.name.tag.yaml
#              ^^^^^^^^^^^^^^^^^ comment.other.plain.sublime-syntax

    - comment:
        still a comment
#       ^^^^^^^^^^^^^^^ comment.other.plain.sublime-syntax

    - comment: "this is a \"comment"
#              ^^^^^^^^^^^^^^^^^^^^^ comment.other.quoted.double.sublime-syntax
#              ^ punctuation.definition.string.begin.yaml
#                                  ^ punctuation.definition.string.end.yaml

      comment: 'this is a ''comment'
#              ^^^^^^^^^^^^^^^^^^^^^ comment.other.quoted.single.sublime-syntax
#              ^ punctuation.definition.string.begin.yaml
#                                  ^ punctuation.definition.string.end.yaml

    - comment: |-
        block comment
#       ^^^^^^^^^^^^^^ comment.other.unquoted.block.sublime-syntax

    - match: ^regexp$
#     ^^^^^ string.unquoted.plain.out.yaml keyword.other.match.sublime-syntax
#            ^^^^^^^^ meta.expect-regexp source.regexp.oniguruma
#            ^ keyword.control.anchors.regexp
      match:
        also
        (?:regexp)
#       ^^^^^^^^^^ source.regexp
#                ^ keyword.control.group.regexp

      match: [this is a list]
#            ^^^^^^^^^^^^^^^^ invalid.illegal.expected-string.sublime-syntax
      match: '[this is a set]'
#             ^^^^^^^^^^^^^^^ source.regexp
      match: {{mapping}}
#            ^^^^^^^^^^^ invalid.illegal.expected-string.sublime-syntax
      match: '{{variable}}'
#             ^^^^^^^^^^^^ source.regexp
      match: # a comment
#            ^^^^^^^^^^^ comment.line

      match: |
      (?x) # extended group with comments
#     ^^^^ source.regexp.oniguruma meta.group.extended.regexp
#          ^ source.regexp.oniguruma comment.line.number-sign.regexp punctuation.definition.comment.regexp
    - scope: abc
#     ^^^^^ string.unquoted.plain.out.yaml storage.type.scope-name.sublime-syntax
    - meta_scope: abc
#     ^^^^^^^^^^ string.unquoted.plain.out.yaml storage.type.scope-name.meta.sublime-syntax
    - meta_content_scope: abc
#     ^^^^^^^^^^^^^^^^^^ string.unquoted.plain.out.yaml storage.type.scope-name.meta.sublime-syntax

    - meta_include_prototype: false
#     ^^^^^^^^^^^^^^^^^^^^^^ string.unquoted.plain.out.yaml keyword.control.flow.include-prototype.sublime-syntax
#                             ^^^^^ meta.expect-bool constant.language.boolean.yaml

    - scope: >-
        long.scope.name
        over.multiple.lines
#       ^^^^^^^^^^^^^^^^^^^ meta.scope.sublime-syntax string.unquoted.block.yaml
#           ^ punctuation.separator.scope-segments.sublime-syntax

    - embed: scope:source.test
#     ^^^^^ string.unquoted.plain.out.yaml keyword.operator.include.sublime-syntax
#            ^^^^^ support.type.include.sublime-syntax
    - embed_scope: meta.embedded.source.test
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
#     ^^^^^^^^^^^ storage.type.scope-name.sublime-syntax
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.scope.sublime-syntax string.unquoted.plain.out.yaml
    - escape: foo(.)bar
#     ^^^^^^ string.unquoted.plain.out.yaml keyword.other.escape.sublime-syntax
#             ^^^^^^^^^^ meta.expect-regexp
#                 ^ source.regexp.oniguruma keyword.other.any.regexp
    - escape_captures:
#     ^^^^^^^^^^^^^^^ storage.type.captures.sublime-syntax
        1: keyword.other
#          ^^^^^^^ meta.expect-captures meta.scope.sublime-syntax string.unquoted.plain.out.yaml
#                 ^ punctuation.separator.scope-segments.sublime-syntax

variables:
#^^^^^^^^ string.unquoted.plain.out.yaml keyword.control.flow.variables.sublime-syntax

contexts: !mytag
#^^^^^^^ string.unquoted.plain.out.yaml keyword.control.flow.contexts.sublime-syntax
#         ^^^^^^ storage.type.tag-handle.yaml
  main: !mytag
# ^^^^ entity.name.function.context.sublime-syntax
#       ^^^^^^ storage.type.tag-handle.yaml
    - match: !mytag abc+
#     ^^^^^ keyword.other.match.sublime-syntax
#            ^^^^^^ storage.type.tag-handle.yaml
#                   ^^^^ source.regexp.oniguruma
      push: !mytag scope
#     ^^^^ keyword.control.flow.push.sublime-syntax
#           ^^^^^^ storage.type.tag-handle.yaml
#                  ^^^^^ variable.other.sublime-syntax
      pop: !mytag true
#     ^^^ keyword.control.flow.pop.sublime-syntax
#          ^^^^^^ storage.type.tag-handle.yaml
#                 ^^^^ constant.language.boolean.yaml

    - match: foo
      push:
        -
#       ^ meta.expect-context-list-or-content punctuation.definition.block.sequence.item.yaml

    - match: foo
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
      push:   # comment
        -
#       ^ meta.expect-context-list-or-content punctuation.definition.block.sequence.item.yaml

    - match: foo
      push:   # comment
        -
    - match: foo
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
      push:   # comment
        - context-name

    - match: foo
#<- - meta.expect-include - meta.expect-context-list-or-content - meta.expect-context-list
      push:
        - match
#^^^^^^^ meta.expect-context-list-or-content
#       ^^ meta.context-list-or-content - meta.expect-context-list-or-content - meta.include
#         ^^^^^ meta.context-list-or-content meta.include.sublime-syntax - meta.expect-context-list-or-content
#              ^ meta.context-list-or-content.sublime-syntax - meta.expect-context-list-or-content - meta.include
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^ string.unquoted.plain.out.yaml variable.other.sublime-syntax
        - match
#<- meta.context-list.sublime-syntax - meta.include - meta.expect-context-list-or-content - meta.context-list-or-content
#       ^^ meta.context-list.sublime-syntax - meta.include
#         ^^^^^ meta.context-list meta.include.sublime-syntax
#              ^ meta.context-list.sublime-syntax - meta.include
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^ string.unquoted.plain.out.yaml variable.other.sublime-syntax
        - scope:source.yaml
#       ^^ meta.context-list.sublime-syntax - meta.include
#         ^^^^^^^^^^^^^^^^^ meta.context-list meta.include.sublime-syntax
#                          ^ meta.context-list.sublime-syntax - meta.include
        - YAML.sublime-syntax#property
#       ^^ meta.context-list.sublime-syntax - meta.include
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.context-list meta.include.sublime-syntax
#                                     ^ meta.context-list.sublime-syntax - meta.include
        - match: test
#       ^^^^^^^^^^^^^^ meta.context-list.sublime-syntax - meta.include
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^^^^^^^ invalid.illegal.include.sublime-syntax
          scope: invalid
#<- - meta.context-list.sublime-syntax - meta.include
#         ^ string.unquoted.plain.out.yaml storage.type.scope-name.sublime-syntax

    - match: foo
      push:
        - - meta_scope: meta
#      ^ - meta.anonymous-context
#       ^^^^^^^^^^^^^^^^^^^^^ meta.anonymous-context.sublime-syntax
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^ punctuation.definition.block.sequence.item.yaml
#           ^^^^^^^^^^ storage.type.scope-name.meta.sublime-syntax
          - include: context
#        ^^^^^^^^^^^^^^^^^^^^ meta.anonymous-context.sublime-syntax
#         ^ punctuation.definition.block.sequence.item.yaml
#           ^^^^^^^ keyword.operator.include.sublime-syntax
        - context-1
#<- - meta.anonymous-context
#      ^ meta.expect-context-list-or-content
#       ^^ meta.context-list-or-content.sublime-syntax
#         ^^^^^^^^^ meta.context-list-or-content.sublime-syntax meta.include.sublime-syntax
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^^^^^ variable.other.sublime-syntax
        - - meta_scope: meta
#      ^ - meta.anonymous-context
#       ^^^^^^^^^^^^^^^^^^^^^ meta.anonymous-context.sublime-syntax
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^ punctuation.definition.block.sequence.item.yaml
#           ^^^^^^^^^^ storage.type.scope-name.meta.sublime-syntax
          - include: context
#        ^^^^^^^^^^^^^^^^^^^^ meta.anonymous-context.sublime-syntax
#         ^ punctuation.definition.block.sequence.item.yaml
#           ^^^^^^^ keyword.operator.include.sublime-syntax
        - context-2
#<- - meta.anonymous-context
#      ^^^ meta.context-list.sublime-syntax
#         ^^^^^^^^^ meta.context-list.sublime-syntax meta.include.sublime-syntax
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^^^^^ variable.other.sublime-syntax
        - context-3
#<- - meta.anonymous-context
#      ^^^ meta.context-list.sublime-syntax
#         ^^^^^^^^^ meta.context-list.sublime-syntax meta.include.sublime-syntax
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^^^^^ variable.other.sublime-syntax

    - match: foo
      push:
        - meta_scope: meta
  #<- meta.expect-context-list-or-content
  #^^^^^^^ meta.expect-context-list-or-content - meta.expect-context-list - meta.context-list
  #       ^^^^^^^^^^^^^^^^^ - meta.expect-context-list-or-content - meta.expect-context-list - meta.context-list

    - match: foo
#<- - meta.context-list.sublime-syntax - meta.include
#   ^ meta.block.contexts.sublime-syntax punctuation.definition.block.sequence.item.yaml
#     ^^^^^ meta.block.contexts.sublime-syntax string.unquoted.plain.out.yaml keyword.other.match.sublime-syntax

    - match: x
      branch_point: point
#     ^ string.unquoted.plain.out.yaml keyword.declaration.branch-point.sublime-syntax
#                  ^ meta.expect-branch-point
#                   ^^^^^ meta.branch-point.sublime-syntax string.unquoted.plain.out.yaml entity.name.label.branch-point.sublime-syntax
      branch:
#     ^^^^^^ string.unquoted.plain.out.yaml keyword.control.flow.push.sublime-syntax
        - a
#         ^ string.unquoted.plain.out.yaml variable.other.sublime-syntax
        - b
      fail: point
#     ^ string.unquoted.plain.out.yaml keyword.control.flow.break.sublime-syntax
#          ^ meta.expect-branch-point-reference
#           ^ meta.branch-point-reference.sublime-syntax string.unquoted.plain.out.yaml variable.other.branch-point.sublime-syntax

      pop:not a key
#     ^^^ - keyword
variables:also not a key
# <- - keyword
