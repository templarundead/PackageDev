%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Sublime Text Theme (JSON)
file_extensions:
  - sublime-theme
scope: source.json.sublime.theme

variables:
  string_key: |-
    (?x:
      font\.face
    )
  color_key: |-
    (?x:
        line_selection(?:_border)?_color
      | highlight(?:_border)?_colour
      | headline_color
      | (?:selected_)?(?:match_)?fg
      | bg
      | shadow_color
      | viewport_color
      | color_scheme_tint(?:_2)?
      | color\d+
    )
  integer_key: |-
    (?x:
        num_colors
      | tab_overlap
      | tab_(?:min_)width
      | tab_height
      | tint_index
      | accent_tint_index
      | border_size
      | spacing
      | inside_spacing | outside_vspacing | outside_hspacing
    )
  float_key: |-
    (?x:
        line_selection_border_(?:width|radius)
      | indent(?:_offset)?
      | opacity
      | viewport_opacity
    )
  boolean_key: |-
    (?x:
        dark_content
      | indent_top_level
      | spacer_rows
      | font\. (?:bold|italic)
      | mouse_wheel_switch
      | fg_blend
      | overlay
    )
  attribute: |-
    (?x:
        hover # all
      | file_(?:light|medium|medium_dark|dark) # luminosity attributes
      | selectable | selected | expandable | expanded # tree_row
      | dirty | transient # tab_control
      | panel_visible # status_bar
      | dark | horizonzal # stat_bar_control
      | pressed | confirm | highlighted # button_control
      | left | right # icon_button_control
    )

contexts:
  main:
    - match: (?=\{)
      push: main-mapping
    - include: rules-sequence-pop
    - include: expect-mapping-rest

  main-mapping:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      push:
        - meta_scope: meta.theme.collection.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          set: only-comments
        - match: (?=")
          push: [in-mapping-expect-comma, main-key]
        - include: expect-key-rest

  main-key:
    - clear_scopes: 1
    - match: (")(rules)(")
      scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-rules-sequence-value, expect-colon]
    - match: (")(variables)(")
      scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-variables-mapping-value, expect-colon]
    - match: (")(extends)(")
      scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-extends-string-value, expect-colon]
    - include: in-dictionary-main-key

  in-dictionary-main-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-extends-string-value:
    - match: (?=\")
      set: [mapping-value-meta, string-pop]

  expect-rules-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, rules-sequence-pop]
    - include: expect-sequence-rest

  rules-sequence-pop:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.rules.collection.sublime-theme meta.sequence.json
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\{)
          push: [in-sequence-expect-comma, rules-mapping-pop]
        - include: comments
        - match: \S
          scope: invalid.illegal.expected-mapping.sublime-theme

  rules-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.rule.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, rule-key]
        - include: expect-key-rest

  rule-key:
    - clear_scopes: 1
    - match: (")(class)(")
      scope: meta.mapping.key.json meta.rule-key.class.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-string-value, expect-colon] # TODO: mark the string value as something to be indexed?
    # TODO: parents (sequence of {class: <some_class>, attributes: <attributes>})
    #   "parents": [{"class": "commit_table_row", "attributes": ["selected"]}],
    # color values
    - match: (")({{color_key}})(")
      scope: meta.mapping.key.json meta.rule-key.color.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-color-value, expect-colon]
    # number values
    - match: (")({{float_key}})(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-interpolatable-number-value, expect-colon]
    - match: (")({{integer_key}})(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-number-value, expect-colon]
    # TODO: inner_margin, content_margin, row_padding, max_margin_trim;
    #   padding&margin: number or sequence of numbers
    # TODO: min_size, icon_spacing, tint_modifier, shadow_offset, accent_tint_modifier;
    #   sequence of numbers
    # boolean values
    - match: (")({{boolean_key}})(")
      scope: meta.mapping.key.json meta.rule-key.string.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-boolean-value, expect-colon]
    # string values
    - match: (")({{string_key}})(")
      scope: meta.mapping.key.json meta.rule-key.string.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-string-value, expect-colon]
    # TODO: attributes; accepts sequence of attributes(string), optional ! for negation
    # TODO: settings; accepts sequence of strings, optional ! for negation
    # TODO: texture; accepts string or "animation" object
    # TODO: font.size; accepts number or string with variables, e.g. "var(label_color)"

    # layer: color values
    - match: (")((layer\d+)(\.)tint)(")
      scope: meta.mapping.key.json meta.rule-key.color.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-color-value, expect-colon]
    # layer: boolean values
    - match: (")((layer\d+)(\.)(?:draw_center|repeat))(")
      scope: meta.mapping.key.json meta.rule-key.boolean.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-boolean-value, expect-colon]
    # layer: number values
    - match: (")((layer\d+)(\.)opacity)(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-interpolatable-number-value, expect-colon]
    # TODO layer*.inner_margin
    # TODO layer*.texture
    - include: in-dictionary-rule-key
    - include: expect-key-rest

  in-dictionary-rule-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.rule-key.sublime-color-scheme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-variables-mapping-value:
    - match: (?=\{)
      set: [mapping-value-meta, variable-mapping-pop]
    - include: expect-mapping-rest

  variable-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.variables.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, variable-mapping-key]
        - include: expect-key-rest

  variable-mapping-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json meta.variable-name.sublime-theme
        - meta_content_scope: entity.name.variable.sublime-theme
        - match: (?=")
          set:
            - match: '"'
              scope: string.quoted.double.json meta.variable-name.sublime-theme punctuation.definition.string.end.json
              set: [expect-color-or-any-value, expect-colon]
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          set: [expect-color-string-value, expect-colon]
        - include: string-escape

  expect-color-value:
    - match: (?=")
      set: [mapping-value-meta, Sublime Text Color Scheme.sublime-syntax#color-string-pop]
    # TODO: highlight sequences?
    #   https://www.sublimetext.com/docs/3/themes.html#color_values
    #   https://www.sublimetext.com/docs/3/themes.html#deprecated
    - include: expect-sequence-value

  expect-color-or-any-value:
    - match: (?="|\[)
      set: [expect-color-value]
    - include: expect-any-value

  comments:
    - include: Sublime JSON.sublime-syntax#comments

  only-comments:
    - include: Sublime JSON.sublime-syntax#only-comments

  expect-colon:
    - include: Sublime JSON.sublime-syntax#expect-colon

  expect-any-value:
    - include: Sublime JSON.sublime-syntax#expect-any-value

  expect-scope-string-value:
    - include: Sublime JSON.sublime-syntax#expect-scope-string-value

  expect-key-rest:
    - include: Sublime JSON.sublime-syntax#expect-key-rest

  expect-sequence-value:
    - include: Sublime JSON.sublime-syntax#expect-sequence-value

  expect-sequence-rest:
    - include: Sublime JSON.sublime-syntax#expect-sequence-rest

  expect-mapping-rest:
    - include: Sublime JSON.sublime-syntax#expect-mapping-rest

  expect-number-value:
    - include: Sublime JSON.sublime-syntax#expect-number-value

  expect-interpolatable-number-value:
    - match: (?=\{)
      set: expect-mapping-value
    # TODO: "interpolation" mapping (also layer*.)
    #   https://www.sublimetext.com/docs/3/themes.html#layer_properties
    #   { "target": 0.6, "speed": 4.0, "interpolation": "smoothstep" }
    - include: expect-number-value

  expect-string-rest:
    - include: Sublime JSON.sublime-syntax#expect-string-rest

  expect-string-value:
    - include: Sublime JSON.sublime-syntax#expect-string-value

  string-escape:
    - include: Sublime JSON.sublime-syntax#string-escape

  string-pop:
    - include: Sublime JSON.sublime-syntax#string-pop

  expect-boolean-value:
    - include: Sublime JSON.sublime-syntax#expect-boolean-value

  expect-mapping-value:
    - include: Sublime JSON.sublime-syntax#expect-mapping-value

  in-sequence-expect-comma:
    - include: Sublime JSON.sublime-syntax#in-sequence-expect-comma

  in-mapping-expect-comma:
    - include: Sublime JSON.sublime-syntax#in-mapping-expect-comma

  expect-command-name-value:
    - include: Sublime JSON.sublime-syntax#expect-command-name-value

  expect-color-string-value:
    - include: Sublime Text Color Scheme.sublime-syntax#expect-color-string-value

  mapping-value-meta:
    - clear_scopes: 1
    - meta_scope: meta.mapping.value.json
    - match: ''
      pop: true
