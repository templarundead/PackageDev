%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Sublime Text Theme (JSON)
file_extensions:
  - sublime-theme
  - hidden-theme
scope: source.json.sublime.theme

variables:
  string_key: |-
    (?x:
        font\.face
      | case # since 3179
    )
  color_key: |-
    (?x:
        border_color
      | line_selection(?:_border)?_color
      | highlight(?:_border)?_color
      | headline_color
      | (?:selected_)?(?:match_)?fg
      | fg | color # alias
      | bg | background_color # alias?
      | shadow_color
      | viewport_color
      | color_scheme_tint(?:_2)?
      | color\d+
      | link_color # from Sublime Merge
      | (?:accent_)?tint_modifier
      | (?:left|right|top|bottom)_shadow
    )
  integer_key: |-
    (?x:
        num_colors
      | tab_overlap
      | tab_(?:min_)?width
      | tab_height
      | tint_index
      | accent_tint_index
      | border_size
      | spacing
      | inside_spacing | outside_vspacing | outside_hspacing
      | (?:left|right|top|bottom)_shadow_size
    )
  padding_and_margin_key: |-
    (?x:
        inner_margin
      | content_margin
      | row_padding
      | max_margin_trim
      | min_size  # also accepts numbers (undocumented)
    )
  number_sequence_key: |-
    (?x:
        icon_spacing
      | shadow_offset
    )
  float_key: |-
    (?x:
        line_selection_border_(?:width|radius)
      | indent(?:_offset)?
      | opacity
      | viewport_opacity
      | hit_test_level
      | font\.size
    )
  boolean_key: |-
    (?x:
        dark_content
      | indent_top_level
      | spacer_rows
      | font\. (?:bold|italic)
      | mouse_wheel_switch
      | fg_blend
      | overlay
    )
  attribute: |-
    (?x:
        hover # all
      | file_(?:light|medium|medium_dark|dark) # luminosity attributes
      | selectable | selected | expandable | expanded # tree_row
      | dirty | transient # tab_control
      | panel_visible # status_bar
      | dark | horizontal # stat_bar_control
      | pressed | confirm | highlighted # button_control
      | left | right # icon_button_control
      | h?scrollable # scroll_area_control
      | ignored | untracked | modified | missing | added | staged | deleted | unmerged # file_system_entry
    )
  platform: |-
    (?x: linux | osx | windows )

contexts:
  main:
    - match: (?=\{)
      push: main-mapping
    - include: rules-sequence-pop
    - include: expect-mapping-rest

  main-mapping:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      push:
        - meta_scope: meta.theme.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          set: only-comments
        - match: (?=")
          push: [in-mapping-expect-comma, main-key]
        - include: expect-key-rest

  main-key:
    - clear_scopes: 1
    - match: (")(rules)(")
      scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-rules-sequence-value, expect-colon]
    - match: (")(variables)(")
      scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-variables-mapping-value, expect-colon]
    - match: (")(extends)(")
      scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-extends-string-value, expect-colon]
    - include: in-dictionary-main-key

  in-dictionary-main-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.main-key.sublime-theme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-extends-string-value:
    - match: (?=\")
      set: [mapping-value-meta, string-pop]

  expect-rules-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, rules-sequence-pop]
    - include: expect-sequence-rest

  rules-sequence-pop:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.rules.collection.sublime-theme meta.sequence.json
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\{)
          push: [in-sequence-expect-comma, rule-mapping-pop]
        - include: comments
        - match: \S
          scope: invalid.illegal.expected-mapping.sublime-theme

  rule-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.rule.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, rule-key]
        - include: expect-key-rest

  rule-and-parent-keys:
    # shared by rule and parent mappings
    - match: (")(class)(")
      scope: meta.mapping.key.json meta.rule-key.class.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: storage.modifier.selector.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-class-string-value, expect-colon]
    - match: (")(attributes)(")
      scope: meta.mapping.key.json meta.rule-key.attributes.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: storage.modifier.selector.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-attributes-sequence-value, expect-colon]

  rule-key:
    - clear_scopes: 1
    # selectors
    - include: rule-and-parent-keys
    - match: (")(settings)(")
      scope: meta.mapping.key.json meta.rule-key.settings.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: storage.modifier.selector.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-settings-sequence-value, expect-colon]
    - match: (")(parents)(")
      scope: meta.mapping.key.json meta.rule-key.parents.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: storage.modifier.selector.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-parents-sequence-value, expect-colon]
    - match: (")(platforms)(")
      scope: meta.mapping.key.json meta.rule-key.platforms.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: storage.modifier.selector.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-platforms-sequence-value, expect-colon]

    # color values
    - match: (")({{color_key}})(")
      scope: meta.mapping.key.json meta.rule-key.color.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-color-value, expect-colon]
    # numeric values
    - match: (")({{float_key}})(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-interpolatable-number-value, expect-colon]
    - match: (")({{integer_key}})(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-number-value, expect-colon]
    - match: (")({{padding_and_margin_key}})(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-number-or-number-sequence-value, expect-colon]
    - match: (")({{number_sequence_key}})(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-sequence-value, expect-colon] # actually number sequence
    # boolean values
    - match: (")({{boolean_key}})(")
      scope: meta.mapping.key.json meta.rule-key.string.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-boolean-value, expect-colon]
    # string values
    - match: (")({{string_key}})(")
      scope: meta.mapping.key.json meta.rule-key.string.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-string-value, expect-colon]
    - match: (")(texture)(")
      scope: meta.mapping.key.json meta.rule-key.string.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-texture-mapping-value, expect-colon]

    # layer: color values
    - match: (")((layer\d+)(\.)tint)(")
      scope: meta.mapping.key.json meta.rule-key.color.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-tint-value, expect-colon]
    # layer: boolean values
    - match: (")((layer\d+)(\.)(?:draw_center|repeat))(")
      scope: meta.mapping.key.json meta.rule-key.boolean.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-boolean-value, expect-colon]
    # layer: numeric values
    - match: (")((layer\d+)(\.)opacity)(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-interpolatable-number-value, expect-colon]
    - match: (")((layer\d+)(\.)inner_margin)(")
      scope: meta.mapping.key.json meta.rule-key.number.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-number-or-number-sequence-value, expect-colon]
    - match: (")((layer\d+)(\.)texture)(")
      scope: meta.mapping.key.json meta.rule-key.string.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-theme
        3: constant.other.layer.sublime-theme
        4: punctuation.accessor.dot.sublime-theme
        5: punctuation.definition.string.end.json
      set: [expect-texture-mapping-value, expect-colon]
    - include: in-dictionary-rule-key
    - include: expect-key-rest

  in-dictionary-rule-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.rule-key.sublime-theme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-variables-mapping-value:
    - match: (?=\{)
      set: [mapping-value-meta, variables-mapping-pop]
    - include: expect-mapping-rest

  variables-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.variables.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, variables-mapping-key]
        - include: expect-key-rest

  variables-mapping-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json meta.variable-name.sublime-theme
        - meta_content_scope: entity.name.variable.sublime-theme
        - match: (?=")
          set:
            - match: '"'
              scope: string.quoted.double.json meta.variable-name.sublime-theme punctuation.definition.string.end.json
              set: [expect-color-or-any-value, expect-colon]
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          set: [expect-color-or-any-value, expect-colon]
        - include: string-escape

  expect-attributes-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, attributes-sequence-pop]
    - include: expect-sequence-rest

  attributes-sequence-pop:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.sequence.json meta.attributes-sequence.sublime-theme
        - include: comments
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\S)
          push: [in-sequence-expect-comma, expect-attribute-string]

  expect-attribute-string:
    - match: (")(!?)({{attribute}})(")
      scope: string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.operator.logical.sublime-theme
        3: entity.other.attribute-name.sublime-theme # I hate this name, but it's fairly standard
        4: punctuation.definition.string.end.json
      pop: true
    - include: expect-string

  expect-platforms-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, platforms-sequence-pop]
    - include: expect-sequence-rest

  platforms-sequence-pop:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.sequence.json meta.platforms-sequence.sublime-theme
        - include: comments
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\S)
          push: [in-sequence-expect-comma, expect-platform-string]

  expect-platform-string:
    - match: (")(!?)({{platform}})(")
      scope: string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.operator.logical.sublime-theme
        3: support.constant.plaform-name.sublime-theme
        4: punctuation.definition.string.end.json
      pop: true
    - include: expect-string

  expect-settings-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, settings-sequence-pop]
    - include: expect-sequence-rest

  settings-sequence-pop:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.sequence.json meta.settings-sequence.sublime-theme
        - include: comments
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\S)
          push: [in-sequence-expect-comma, expect-setting-string]

  expect-parents-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, parents-sequence-pop]
    - include: expect-sequence-rest

  parents-sequence-pop:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.sequence.json meta.parents-sequence.sublime-theme
        - include: comments
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\S)
          push: [in-sequence-expect-comma, expect-parent-mapping]

  expect-parent-mapping:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.parent-mapping.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, parent-mapping-key]
        - include: expect-key-rest
    - include: expect-mapping-rest

  parent-mapping-key:
    - clear_scopes: 1
    - include: rule-and-parent-keys
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.parent-key.sublime-theme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-setting-string:
    - match: (\")(!?)
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.operator.logical.sublime-theme
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json
        - meta_content_scope: variable.other.setting.sublime-theme
        - include: scope:source.json.sublime#inside-string
        - match: '[\w]+(\.)'
          scope: keyword.other.namespace.sublime-theme
          captures:
            1: punctuation.separator.namespace.sublime-theme
    - include: expect-string

  expect-texture-mapping-value:
    - include: scope:source.json.sublime#expect-null-value-only
    - include: var-value
    - match: (?=\{)
      set: [mapping-value-meta, texture-mapping-pop]
    - include: expect-string

  texture-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.texture-mapping.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, texture-mapping-key]
        - include: expect-key-rest

  texture-mapping-key:
    - match: (")(keyframes)(")
      scope: meta.mapping.key.json meta.texture-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.texture.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-sequence-value, expect-colon] # techincally a sequence of strings
    - match: (")(frame_time)(")
      scope: meta.mapping.key.json meta.texture-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.texture.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-number-value, expect-colon]
    - match: (")(loop)(")
      scope: meta.mapping.key.json meta.texture-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.texture.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-boolean-value, expect-colon]
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.texture-key.sublime-theme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-interpolatable-number-value:
    - include: var-value
    - match: (?=\{)
      set: [mapping-value-meta, interpolation-mapping-pop]
    - include: expect-number-value

  interpolation-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.interpolation-mapping.sublime-theme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, interpolation-mapping-key]
        - include: expect-key-rest

  interpolation-mapping-key:
    # https://www.sublimetext.com/docs/3/themes.html#layer_properties
    - clear_scopes: 1
    - match: (")(target|speed)(")
      scope: meta.mapping.key.json meta.interpolation-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.interpolation.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-number-value, expect-colon]
    - match: (")(interpolation)(")
      scope: meta.mapping.key.json meta.interpolation-key.sublime-theme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.interpolation.sublime-theme
        3: punctuation.definition.string.end.json
      set: [expect-interpolation-string-value, expect-colon]
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.interpolation-key.sublime-theme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-interpolation-string-value:
    - include: var-value
    - match: (?=")
      set: [mapping-value-meta, interpolation-string-pop]
    - include: expect-string-rest

  interpolation-string-pop:
    - match: (")(linear|smoothstep)(")
      captures:
        1: punctuation.definition.string.begin.json
        2: support.constant.interpolation.sublime-theme
        3: punctuation.definition.string.begin.json
      pop: true
    - include: string-pop

  expect-tint-value:
    - include: scope:source.json.sublime#expect-boolean-value-only
    - include: scope:source.json.sublime#expect-null-value-only
    - include: expect-color-value

  expect-color-value:
    # already has variable interpolation
    - match: (?=")
      set: [mapping-value-meta, scope:source.json.sublime.color-scheme#color-string-pop]
    # Sequences are deprecated, so only use lazy highlighting
    #   https://www.sublimetext.com/docs/3/themes.html#color_values
    #   https://www.sublimetext.com/docs/3/themes.html#deprecated
    - include: expect-sequence-value

  expect-color-or-any-value:
    - match: (?="|\[)
      set: [expect-color-value]
    - include: expect-any-value

  expect-number-or-number-sequence-value:
    - include: var-value
    - include: scope:source.json.sublime#number-pop
    # Be a bit lazy here
    - include: expect-sequence-value

  var-value:
    - match: (?=\"var\(|\"(v(a(r)?)?)?(\"|$)) # improve ux while typing
      set: [mapping-value-meta, var-pop]

  var-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json
        - meta_content_scope: source.css-color
        - include: scope:source.json.sublime#inside-string
        - include: scope:source.json.sublime.color-scheme#color-var-function

  expect-class-string-value:
    - match: (?=")
      set: [mapping-value-meta, class-string-pop]
    - include: expect-string-rest

  class-string-pop:
    - match: '"'
      scope: punctuation.definition.string.begin.json
      set:
        # deliberately do not choose "entity.name.class"
        - meta_scope: string.quoted.double.json meta.class-selector.sublime-theme
        - meta_content_scope: entity.name.class-selector.sublime-theme
        - include: scope:source.json.sublime#inside-string

  #####################################

  comments:
    - include: scope:source.json.sublime#comments

  only-comments:
    - include: scope:source.json.sublime#only-comments

  expect-colon:
    - include: scope:source.json.sublime#expect-colon

  expect-any-value:
    - include: scope:source.json.sublime#expect-any-value

  expect-key-rest:
    - include: scope:source.json.sublime#expect-key-rest

  expect-sequence-value:
    - include: var-value
    - include: scope:source.json.sublime#expect-sequence-value

  expect-sequence-rest:
    - include: scope:source.json.sublime#expect-sequence-rest

  expect-mapping-rest:
    - include: scope:source.json.sublime#expect-mapping-rest

  expect-number-value:
    - include: var-value
    - include: scope:source.json.sublime#expect-number-value

  expect-string:
    - include: scope:source.json.sublime#expect-string

  expect-string-value:
    - include: var-value
    - include: scope:source.json.sublime#expect-string-value

  expect-string-rest:
    - include: scope:source.json.sublime#expect-string-rest

  string-escape:
    - include: scope:source.json.sublime#string-escape

  string-pop:
    - include: scope:source.json.sublime#string-pop

  expect-boolean-value:
    - include: var-value
    - include: scope:source.json.sublime#expect-boolean-value

  in-sequence-expect-comma:
    - include: scope:source.json.sublime#in-sequence-expect-comma

  in-mapping-expect-comma:
    - include: scope:source.json.sublime#in-mapping-expect-comma

  mapping-value-meta:
    - clear_scopes: 1
    - meta_scope: meta.mapping.value.json
    - match: ''
      pop: true
